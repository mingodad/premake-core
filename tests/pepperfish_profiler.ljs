/*

== Introduction ==

  Note that this requires os.clock(), debug.sethook(),
  and debug.getinfo() or your equivalent replacements to
  be available if this is an embedded application.

  Example usage:

    profiler = newProfiler()
    profiler->start()

    < call some functions that take time >

    profiler->stop()

    local outfile = io.open( "profile.txt", "w+" )
    profiler->report( outfile )
    outfile->close()

== Optionally choosing profiling method ==

The rest of this comment can be ignored if you merely want a good profiler.

  newProfiler(method, sampledelay):

If method is omitted or "time", will profile based on real performance.
optionally, frequency can be provided to control the number of opcodes
per profiling tick. By default this is 100000, which (on my system) provides
one tick approximately every 2ms and reduces system performance by about 10%.
This can be reduced to increase accuracy at the cost of performance, or
increased for the opposite effect.

If method is "call", will profile based on function calls. Frequency is
ignored.


"time" may bias profiling somewhat towards large areas with "simple opcodes",
as the profiling function (which introduces a certain amount of unavoidable
overhead) will be called more often. This can be minimized by using a larger
sample delay - the default should leave any error largely overshadowed by
statistical noise. With a delay of 1000 I was able to achieve inaccuray of
approximately 25%. Increasing the delay to 100000 left inaccuracy below my
testing error.

"call" may bias profiling heavily towards areas with many function calls.
Testing found a degenerate case giving a figure inaccurate by approximately
20,000%.  (Yes, a multiple of 200.) This is, however, more directly comparable
to common profilers (such as gprof) and also gives accurate function call
counts, which cannot be retrieved from "time".

I strongly recommend "time" mode, and it is now the default.

== History ==

2008-09-16 - Time-based profiling and conversion to Lua 5.1
  by Ben Wilhelm ( zorba-pepperfish@pavlovian.net ).
  Added the ability to optionally choose profiling methods, along with a new
  profiling method.

Converted to Lua 5, a few improvements, and 
additional documentation by Tom Spilman ( tom@sickheadgames.com )

Additional corrections and tidying by original author
Daniel Silverstone ( dsilvers@pepperfish.net )

== Status ==

Daniel Silverstone is no longer using this code, and judging by how long it's
been waiting for Lua 5.1 support, I don't think Tom Spilman is either. I'm
perfectly willing to take on maintenance, so if you have problems or
questions, go ahead and email me :)
-- Ben Wilhelm ( zorba-pepperfish@pavlovian.net ) '

== Copyright ==

Lua profiler - Copyright Pepperfish 2002,2003,2004

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to
do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.

--*/


//
// All profiler related stuff is stored in the top level table '_profiler'
//
_profiler = {};


//
// newProfiler() creates a new profiler object for managing 
// the profiler and storing state.  Note that only one profiler 
// object can be executing at one time.
//
function newProfiler(variant, sampledelay) {
  if( _profiler.running ) {
    print("Profiler already running.");
    return;
  }

  variant = variant || "time";

  if( variant != "time" && variant != "call" ) {
    print("Profiler method must be 'time' or 'call'.");
    return;
  }
  
  var newprof = {};
  for( k,v in pairs(_profiler) ) {
    newprof[k] = v;
  }
  newprof.variant = variant;
  newprof.sampledelay = sampledelay || 100000;
  return newprof;
}


//
// This function starts the profiler.  It will do nothing
// if this (or any other) profiler is already running.
//
function _profiler.start(this) {
  if( _profiler.running ) {
    return;
  }
  // Start the profiler. This begins by setting up internal profiler state
  _profiler.running = this;
  this.rawstats = {};
  this.callstack = {};
  if( this.variant == "time" ) {
    this.lastclock = os.clock();
    debug.sethook( _profiler_hook_wrapper_by_time, "", this.sampledelay );
  } else if( this.variant == "call" ) {
    debug.sethook( _profiler_hook_wrapper_by_call, "cr" );
  } else {
    print("Profiler method must be 'time' or 'call'.");
    sys.exit(1);
  }
}


//
// This function stops the profiler.  It will do nothing 
// if a profiler is not running, and nothing if it isn't 
// the currently running profiler.
//
function _profiler.stop(this) {
  if( _profiler.running != this ) {
    return;
  }
  // Stop the profiler.
  debug.sethook( null );
  _profiler.running = null;
}


//
// Simple wrapper to handle the hook.  You should not
// be calling this directly. Duplicated to reduce overhead.
//
function _profiler_hook_wrapper_by_call(action) {
  if( _profiler.running == null ) {
    debug.sethook( null );
  }
  _profiler.running->_internal_profile_by_call(action);
}
function _profiler_hook_wrapper_by_time(action) {
  if( _profiler.running == null ) {
    debug.sethook( null );
  }
  _profiler.running->_internal_profile_by_time(action);
}


//
// This is the main by-function-call function of the profiler and should not
// be called except by the hook wrapper
//
function _profiler._internal_profile_by_call(this,action) {
  // Since we can obtain the 'function' for the item we've had call us, we
  // can use that...
  var caller_info = debug.getinfo( 3 );
  if( caller_info == null ) {
    print ("No caller_info");
    return;
  }
  
  //SHG_LOG("[_profiler._internal_profile] "..(caller_info.name or "<nil>"))

  // Retrieve the most recent activation record...
  var latest_ar = null;
  var callstackLen = #this.callstack;
  if( callstackLen > 0 ) {
    latest_ar = this.callstack[callstackLen];
  }
  
  // Are we allowed to profile this function?
  var should_not_profile = 0;
  for( k,v in pairs(this.prevented_functions) ) {
    if( k == caller_info.func ) {
      should_not_profile = v;
    }
  }
  // Also check the top activation record...
  if( latest_ar ) {
    if( latest_ar.should_not_profile == 2 ) {
      should_not_profile = 2;
    }
  }

  // Now then, are we in 'call' or 'return' ?
  // print("Profile:", caller_info.name, "SNP:", should_not_profile,
  //       "Action:", action )
  if( action == "call" ) {
    // Making a call...
    var this_ar = {};
    this_ar.should_not_profile = should_not_profile;
    this_ar.parent_ar = latest_ar;
    this_ar.anon_child = 0;
    this_ar.name_child = 0;
    this_ar.children = {};
    this_ar.children_time = {};
    this_ar.clock_start = os.clock();
    // Last thing to do on a call is to insert this onto the ar stack...
    table.insert( this.callstack, this_ar );
  } else {
    var this_ar = latest_ar;
    if( this_ar == null ) {
      return; // No point in doing anything if no upper activation record
    }

    // Right, calculate the time in this function...
    this_ar.clock_end = os.clock();
    this_ar.this_time = this_ar.clock_end - this_ar.clock_start;

    // Now, if we have a parent, update its call info...
    if( this_ar.parent_ar ) {
      this_ar.parent_ar.children[caller_info.func] =
        (this_ar.parent_ar.children[caller_info.func] || 0) + 1;
      this_ar.parent_ar.children_time[caller_info.func] =
        (this_ar.parent_ar.children_time[caller_info.func] || 0 ) +
        this_ar.this_time;
      if( caller_info.name == null ) {
        this_ar.parent_ar.anon_child =
          this_ar.parent_ar.anon_child + this_ar.this_time;
      } else {
        this_ar.parent_ar.name_child =
          this_ar.parent_ar.name_child + this_ar.this_time;
      }
    }
    // Now if we're meant to record information about ourselves, do so...
    if( this_ar.should_not_profile == 0 ) {
      var inforec = this->_get_func_rec(caller_info.func,1);
      inforec.count = inforec.count + 1;
      inforec.time = inforec.time + this_ar.this_time;
      inforec.anon_child_time = inforec.anon_child_time + this_ar.anon_child;
      inforec.name_child_time = inforec.name_child_time + this_ar.name_child;
      inforec.func_info = caller_info;
      for( k,v in pairs(this_ar.children) ) {
        inforec.children[k] = (inforec.children[k] || 0) + v;
        inforec.children_time[k] =
          (inforec.children_time[k] || 0) + this_ar.children_time[k];
      }
    }

    // Last thing to do on return is to drop the last activation record...
    callstackLen = #this.callstack;
    table.remove( this.callstack, callstackLen );
  }
}


//
// This is the main by-time internal function of the profiler and should not
// be called except by the hook wrapper
//
function _profiler._internal_profile_by_time(this,action) {
  // we do this first so we add the minimum amount of extra time to this call
  var timetaken = os.clock() - this.lastclock;
  
  var depth = 3;
  var at_top = true;
  var last_caller;
  var caller = debug.getinfo(depth);
  while( caller ) {
    if( ! caller.func ) { caller.func = "(tail call)"; }
    if( this.prevented_functions[caller.func] == null ) {
      var info = this->_get_func_rec(caller.func, 1, caller);
      info.count = info.count + 1;
      info.time = info.time + timetaken;
      if( last_caller ) {
        // we're not the head, so update the "children" times also
        if( last_caller.name ) {
          info.name_child_time = info.name_child_time + timetaken;
        } else {
          info.anon_child_time = info.anon_child_time + timetaken;
        }
        info.children[last_caller.func] =
          (info.children[last_caller.func] || 0) + 1;
        info.children_time[last_caller.func] =
          (info.children_time[last_caller.func] || 0) + timetaken;
      }
    }
    ++depth    ;
    last_caller = caller;
    caller = debug.getinfo(depth);
  }
  
  this.lastclock = os.clock();
}


//
// This returns a (possibly empty) function record for 
// the specified function. It is for internal profiler use.
//
function _profiler._get_func_rec(this,func,force,info) {
  // Find the function ref for 'func' (if force and not present, create one)
  var ret = this.rawstats[func];
  if( ret == null && force != 1 ) {
    return null;
  }
  if( ret == null ) {
    // Build a new function statistics table
    ret = {};
    ret.func = func;
    ret.count = 0;
    ret.time = 0;
    ret.anon_child_time = 0;
    ret.name_child_time = 0;
    ret.children = {};
    ret.children_time = {};
    ret.func_info = info;
    this.rawstats[func] = ret;
  }
  return ret;
}


//
// This writes a profile report to the output file object.  If
// sort_by_total_time is nil or false the output is sorted by
// the function time minus the time in it's children.
//
function _profiler.report( this, outfile, sort_by_total_time ) {

  outfile->write
    ([=[LJS Profile output created by profiler.ljs. Copyright Pepperfish 2002+

]=]);

  // This is pretty awful.
  var terms = {};
  if( this.variant == "time" ) {
    terms.capitalized = "Sample";
    terms.single = "sample";
    terms.pastverb = "sampled";
  } else if( this.variant == "call" ) {
    terms.capitalized = "Call";
    terms.single = "call";
    terms.pastverb = "called";
  } else {
    assert(false);
  }
  
  var total_time = 0;
  var ordering = {};
  for( func,record in pairs(this.rawstats) ) {
    table.insert(ordering, func);
  }

  if( sort_by_total_time ) {
    table.sort( ordering, 
      function(a,b) { return this.rawstats[a].time > this.rawstats[b].time; }
    );
  } else {
    table.sort( ordering, 
      function(a,b) {
        var arec = this.rawstats[a]; 
        var brec = this.rawstats[b];
        var atime = arec.time - (arec.anon_child_time + arec.name_child_time);
        var btime = brec.time - (brec.anon_child_time + brec.name_child_time);
        return atime > btime;
      }
    );
  }

  var len = #ordering;
  for( i=1,len ) {
    var func = ordering[i];
    var record = this.rawstats[func];
    var thisfuncname = " " .. this->_pretty_name(func) .. " ";
    if( string.len( thisfuncname ) < 42 ) {
      var nameLen = math.ceil((42 - string.len(thisfuncname))/2);
      thisfuncname =
        string.rep( "-", nameLen) .. thisfuncname;
      thisfuncname =
        thisfuncname .. string.rep( "-", 42 - string.len(thisfuncname) );
    }

    total_time = total_time + ( record.time - ( record.anon_child_time +
      record.name_child_time ) );
    outfile->write( string.rep( "-", 19 ) .. thisfuncname ..
      string.rep( "-", 19 ) .. "\n" );
    outfile->write( terms.capitalized.." count:         " ..
      string.format( "%4d", record.count ) .. "\n" );
    outfile->write( "Time spend total:       " ..
      string.format( "%4.3f", record.time ) .. "s\n" );
    outfile->write( "Time spent in children: " ..
      string.format("%4.3f",record.anon_child_time+record.name_child_time) ..
      "s\n" );
    var timeinself =
      record.time - (record.anon_child_time + record.name_child_time);
    outfile->write( "Time spent in self:     " ..
      string.format("%4.3f", timeinself) .. "s\n" );
    outfile->write( "Time spent per " .. terms.single .. ":  " ..
      string.format("%4.5f", record.time/record.count) ..
      "s/" .. terms.single .. "\n" );
    outfile->write( "Time spent in self per "..terms.single..": " ..
      string.format( "%4.5f", timeinself/record.count ) .. "s/" ..
      terms.single.."\n" );

    // Report on each child in the form
    // Child  <funcname> called n times and took a.bs
    var added_blank = 0;
    for( k,v in pairs(record.children) ) {
      if( this.prevented_functions[k] == null ||
         this.prevented_functions[k] == 0
      ) {
        if( added_blank == 0 ) {
          outfile->write( "\n" ); // extra separation line
          added_blank = 1;
        }
        outfile->write( "Child " .. this->_pretty_name(k) ..
          string.rep( " ", 41-string.len(this->_pretty_name(k)) ) .. " " ..
          terms.pastverb.." " .. string.format("%6d", v) );
        outfile->write( " times. Took " ..
          string.format("%4.2f", record.children_time[k] ) .. "s\n" );
      }
    }

    outfile->write( "\n" ); // extra separation line
    outfile->flush();
  }
  outfile->write( "\n\n" );
  outfile->write( "Total time spent in profiled functions: " ..
                 string.format("%5.3g",total_time) .. "s\n" );
  outfile->write( [=[

END
]=] );
  outfile->flush();
}


//
// This writes the profile to the output file object as 
// loadable Lua source.
//
function _profiler.ljs_report(this,outfile) {
  // Purpose: Write out the entire raw state in a cross-referenceable form.
  var ordering = {};
  var functonum = {};
  for( func,record in pairs(this.rawstats) ) {
    table.insert(ordering, func);
    var len = #ordering;
    functonum[func] = len;
  }

  outfile->write(
    "-- Profile generated by profiler.ljs Copyright Pepperfish 2002+\n\n" );
  outfile->write( "-- Function names\nfuncnames = {}\n" );
  var len = #ordering;
  for( i=1,len ) {
    var thisfunc = ordering[i];
    outfile->write( "funcnames[" .. i .. "] = " ..
      string.format("%q", this->_pretty_name(thisfunc)) .. "\n" );
  }
  outfile->write( "\n" );
  outfile->write( "-- Function times\nfunctimes = {}\n" );

  len = #ordering;
  for( i=1,len ) {
    var thisfunc = ordering[i];
    var record = this.rawstats[thisfunc];
    outfile->write( "functimes[" .. i .. "] = { " );
    outfile->write( "tot=" .. record.time .. ", " );
    outfile->write( "achild=" .. record.anon_child_time .. ", " );
    outfile->write( "nchild=" .. record.name_child_time .. ", " );
    outfile->write( "count=" .. record.count .. " }\n" );
  }
  outfile->write( "\n" );
  outfile->write( "-- Child links\nchildren = {}\n" );

  len = #ordering;
  for( i=1,len ) {
    var thisfunc = ordering[i];
    var record = this.rawstats[thisfunc];
    outfile->write( "children[" .. i .. "] = { " );
    for( k,v in pairs(record.children) ) {
      if( functonum[k] ) { // non-recorded functions will be ignored now
        outfile->write( functonum[k] .. ", " );
      }
    }
    outfile->write( "}\n" );
  }
  outfile->write( "\n" );
  outfile->write( "-- Child call counts\nchildcounts = {}\n" );
 
  len = #ordering; 
  for( i=1,len ) {
    var thisfunc = ordering[i];
    var record = this.rawstats[thisfunc];
    outfile->write( "children[" .. i .. "] = { " );
    for( k,v in record.children ) {
      if( functonum[k] ) { // non-recorded functions will be ignored now
        outfile->write( v .. ", " );
      }
    }
    outfile->write( "}\n" );
  }
  outfile->write( "\n" );
  outfile->write( "-- Child call time\nchildtimes = {}\n" );
  len = #ordering;
  for( i=1,len ) {
    var thisfunc = ordering[i];
    var record = this.rawstats[thisfunc];
    outfile->write( "children[" .. i .. "] = { " );
    for( k,v in pairs(record.children) ) {
      if( functonum[k] ) { // non-recorded functions will be ignored now
        outfile->write( record.children_time[k] .. ", " );
      }
    }
    outfile->write( "}\n" );
  }
  outfile->write( "\n\n-- That is all.\n\n" );
  outfile->flush();
}

// Internal function to calculate a pretty name for the profile output
function _profiler._pretty_name(this,func) {

  // Only the data collected during the actual
  // run seems to be correct.... why?
  var info = this.rawstats[ func ].func_info;
  // local info = debug.getinfo( func )

  var name = "";
  if( info.what == "Lua" ) {
    name = "L:";
  }
  if( info.what == "C" ) {
    name = "C:";
  }
  if( info.what == "main" ) {
    name = " :";
  }
  
  if( info.name == null ) {
    name = name .. "<"..tostring(func) .. ">";
  } else {
    name = name .. info.name;
  }

  if( info.source ) {
    name = name .. "@" .. info.source;
  } else {
    if( info.what == "C" ) {
      name = name .. "@?";
    } else {
      name = name .. "@<string>";
    }
  }
  name = name .. ":";
  if( info.what == "C" ) {
    name = name .. "?";
  } else {
    name = name .. info.linedefined;
  }

  return name;
}


//
// This allows you to specify functions which you do
// not want profiled.  Setting level to 1 keeps the
// function from being profiled.  Setting level to 2
// keeps both the function and its children from
// being profiled.
//
// BUG: 2 will probably act exactly like 1 in "time" mode.
// If anyone cares, let me (zorba) know and it can be fixed.
//
function _profiler.prevent(this, func, level) {
  this.prevented_functions[func] = (level || 1);
}


_profiler.prevented_functions = {
  [_profiler.start] = 2,
  [_profiler.stop] = 2,
  [_profiler._internal_profile_by_time] = 2,
  [_profiler._internal_profile_by_call] = 2,
  [_profiler_hook_wrapper_by_time] = 2,
  [_profiler_hook_wrapper_by_call] = 2,
  [_profiler.prevent] = 2,
  [_profiler._get_func_rec] = 2,
  [_profiler.report] = 2,
  [_profiler.ljs_report] = 2,
  [_profiler._pretty_name] = 2
};
