//
// vs200x_vcproj_user.ljs
// Generate a Visual Studio 2002-2008 C/C++ project .user file
// Copyright (c) Jason Perkins and the Premake project
//

	var p = premake;
	var m = p.vstudio.vc200x;



//
// Generate a Visual Studio 200x C++ user file, with support for the new platforms API.
//

	m.elements.user = function(cfg) {
		return {
			m.debugSettings,
		};
	};

	function m.generateUser(prj) {
		p.indent("\t");

		// Only want output if there is something to configure
		var contents = {};
		var size = 0;

		for( cfg in p.project.eachconfig(prj) ) {
			contents[cfg] = p.capture(function() {
				p.push(4);
				p.callArray(m.elements.user, cfg);
				p.pop(4);
			});
			size = size + #contents[cfg];
		}

		if( size > 0 ) {
			m.xmlElement();
			m.visualStudioUserFile();
			p.push('<Configurations>');
			for( cfg in p.project.eachconfig(prj) ) {
				m.userConfiguration(cfg);
				p.push('<DebugSettings');
				if( #contents[cfg] > 0 ) {
					p.outln(contents[cfg]);
				}
				p.pop('/>');
				p.pop('</Configuration>');
			}
			p.pop('</Configurations>');
			p.pop('</VisualStudioUserFile>');
		}
	}



//-
// Output the opening project tag.
//-

	function m.visualStudioUserFile() {
		p.push('<VisualStudioUserFile');
		p.w('ProjectType="Visual C++"');
		m.version();
		p.w('ShowAllFiles="false"');
		p.w('>');
	}



//
// Write out the <Configuration> element, describing a specific Premake
// build configuration/platform pairing.
//

	function m.userConfiguration(cfg) {
		p.push('<Configuration');
		p.x('Name="%s"', p.vstudio.projectConfig(cfg));
		p.w('>');
	}



//
// Write out the debug settings for this project.
//

	m.elements.debugSettings = function(cfg) {
		return {
			m.debugCommand,
			m.debugDir,
			m.debugArgs,
			m.debugEnvironment,
		};
	};

	function m.debugSettings(cfg) {
		p.callArray(m.elements.debugSettings, cfg);
	}


	function m.debugArgs(cfg) {
		if( #cfg.debugargs > 0 ) {
			p.x('CommandArguments="%s"', table.concat(cfg.debugargs, " "));
		}
	}


	function m.debugCommand(cfg) {
		if( cfg.debugcommand ) {
			p.x('Command="%s"', p.vstudio.path(cfg, cfg.debugcommand));
		}
	}


	function m.debugDir(cfg) {
		if( cfg.debugdir ) {
			p.x('WorkingDirectory="%s"', p.vstudio.path(cfg, cfg.debugdir));
		}
	}


	function m.debugEnvironment(cfg) {
		if( #cfg.debugenvs > 0 ) {
			p.x('Environment="%s"', table.concat(cfg.debugenvs, "\n"));
			if( cfg.flags.DebugEnvsDontMerge ) {
				p.x('EnvironmentMerge="false"');
			}
		}
	}
