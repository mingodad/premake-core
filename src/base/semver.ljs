var semver = {
  _VERSION     = '1.2.1',
  _DESCRIPTION = 'semver for Lua',
  _URL         = 'https://github.com/kikito/semver.ljs',
  _LICENSE     = [=[
    MIT LICENSE

    Copyright (c) 2015 Enrique GarcÃ­a Cota

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of tother software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and tother permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  ]=]
};

var function checkPositiveInteger(number, name) {
  assert(number >= 0, name .. ' must be a valid positive number');
  assert(math.floor(number) == number, name .. ' must be an integer');
}

var function present(value) {
  return value && value != '';
}

// splitByDot("a.bbc.d") == {"a", "bbc", "d"}
var function splitByDot(str) {
  str = str || "";
  var t, count = {}, 0;
  str->gsub("([^%.]+)", function(c) {
    ++count    ;
    t[count] = c;
  });
  return t;
}

var function parsePrereleaseAndBuildWithSign(str) {
  var prereleaseWithSign, buildWithSign = str->match("^(-[^+]+)(+.+)$");
  if( ! (prereleaseWithSign && buildWithSign) ) {
    prereleaseWithSign = str->match("^(-.+)$");
    buildWithSign      = str->match("^(+.+)$");
  }
  assert(prereleaseWithSign || buildWithSign, ("The parameter %q must begin with + or - to denote a prerelease or a build")->format(str));
  return prereleaseWithSign, buildWithSign;
}

var function parsePrerelease(prereleaseWithSign) {
  if( prereleaseWithSign ) {
    var prerelease = prereleaseWithSign->match("^-(%w[%.%w-]*)$");
    assert(prerelease, ("The prerelease %q is not a slash followed by alphanumerics, dots and slashes")->format(prereleaseWithSign));
    return prerelease;
  }
}

var function parseBuild(buildWithSign) {
  if( buildWithSign ) {
    var build = buildWithSign->match("^%+(%w[%.%w-]*)$");
    assert(build, ("The build %q is not a + sign followed by alphanumerics, dots and slashes")->format(buildWithSign));
    return build;
  }
}

var function parsePrereleaseAndBuild(str) {
  if( ! present(str) ) { return null, null; }

  var prereleaseWithSign, buildWithSign = parsePrereleaseAndBuildWithSign(str);

  var prerelease = parsePrerelease(prereleaseWithSign);
  var build = parseBuild(buildWithSign);

  return prerelease, build;
}

var function parseVersion(str) {
  var sMajor, sMinor, sPatch, sPrereleaseAndBuild = str->match("^(%d+)%.?(%d*)%.?(%d*)(.-)$");
  assert(type(sMajor) == 'string', ("Could not extract version number(s) from %q")->format(str));
  var major, minor, patch = tonumber(sMajor), tonumber(sMinor), tonumber(sPatch);
  var prerelease, build = parsePrereleaseAndBuild(sPrereleaseAndBuild);
  return major, minor, patch, prerelease, build;
}


// return 0 if a == b, -1 if a < b, and 1 if a > b
var function compare(a,b) {
  return a == b && 0 || a < b && -1 || 1;
}

var function compareIds(myId, otherId) {
  if( myId == otherId ) { return  0;
  } else if( ! myId    ) { return -1;
  } else if( ! otherId ) { return  1;
  }

  var selfNumber, otherNumber = tonumber(myId), tonumber(otherId);

  if( selfNumber && otherNumber ) { // numerical comparison
    return compare(selfNumber, otherNumber);
  // numericals are always smaller than alphanums
  } else if( selfNumber ) {
    return -1;
  } else if( otherNumber ) {
    return 1;
  } else {
    return compare(myId, otherId); // alphanumerical comparison
  }
}

var function smallerIdList(myIds, otherIds) {
  var myLength = #myIds;
  var comparison;

  for( i=1, myLength ) {
    comparison = compareIds(myIds[i], otherIds[i]);
    if( comparison != 0 ) {
      return comparison == -1;
    }
    // if comparison == 0, continue loop
  }

  return myLength < #otherIds;
}

var function smallerPrerelease(mine, other) {
  if( mine == other || ! mine ) { return false;
  } else if( ! other ) { return true;
  }

  return smallerIdList(splitByDot(mine), splitByDot(other));
}

var methods = {};

function methods::nextMajor() {
  return semver(this.major + 1, 0, 0);
}
function methods::nextMinor() {
  return semver(this.major, this.minor + 1, 0);
}
function methods::nextPatch() {
  return semver(this.major, this.minor, this.patch + 1);
}

var mt = { __index = methods };
function mt::__eq(other) {
  return this.major == other.major &&
         this.minor == other.minor &&
         this.patch == other.patch &&
         this.prerelease == other.prerelease;
         // notice that build is ignored for precedence in semver 2.0.0
}
function mt::__lt(other) {
  if( this.major != other.major ) { return this.major < other.major; }
  if( this.minor != other.minor ) { return this.minor < other.minor; }
  if( this.patch != other.patch ) { return this.patch < other.patch; }
  return smallerPrerelease(this.prerelease, other.prerelease);
  // notice that build is ignored for precedence in semver 2.0.0
}
// This works like the "pessimisstic operator" in Rubygems.
// if a and b are versions, a ^ b means "b is backwards-compatible with a"
// in other words, "it's safe to upgrade from a to b"
function mt::__pow(other) {
  if( this.major == 0 ) {
    return this == other;
  }
  return this.major == other.major &&
         this.minor <= other.minor;
}
function mt::__tostring() {
  var buffer = { ("%d.%d.%d")->format(this.major, this.minor, this.patch) };
  if( this.prerelease ) { table.insert(buffer, "-" .. this.prerelease); }
  if( this.build      ) { table.insert(buffer, "+" .. this.build); }
  return table.concat(buffer);
}

var function new(major, minor, patch, prerelease, build) {
  assert(major, "At least one parameter is needed");

  if( type(major) == 'string' ) {
    major,minor,patch,prerelease,build = parseVersion(major);
  }
  patch = patch || 0;
  minor = minor || 0;

  checkPositiveInteger(major, "major");
  checkPositiveInteger(minor, "minor");
  checkPositiveInteger(patch, "patch");

  var result = {major=major, minor=minor, patch=patch, prerelease=prerelease, build=build};
  return setmetatable(result, mt);
}

setmetatable(semver, { __call = function(_, ...) { return new(...); } });
semver._VERSION= semver(semver._VERSION);

return semver;
