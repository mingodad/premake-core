//
// tests/actions/vstudio/vc2010/test_fxcompile_settings.ljs
// Validate FxCompile settings in Visual Studio 2010 C/C++ projects.
// Copyright (c) 2014 Jason Perkins and the Premake project
//

	var p = premake;
	var suite = test.declare("vstudio_vs2010_fxcompile_settings");
	var vc2010 = p.vstudio.vc2010;
	var project = p.project;


//
// Setup
//

	var wks, prj;

	function suite.setup() {
		p.action.set("vs2010");
		wks, prj = test.createWorkspace();
	}

	var function prepare(platform) {
		var cfg = test.getconfig(prj, "Debug", platform);
		vc2010.fxCompile(cfg);
	}


//-
// Check the basic element structure with default settings.
// Project should not generate this block if no hlsl files or no shader settings sets.
//-

	function suite.empty() {
		prepare();
		test.capture ([=[

		]=]);
	}


	function suite.defaultSettings() {
		files ({ "shader.hlsl" });
		prepare();
		test.capture ([=[

		]=]);
	}

//-
// Test FxCompilePreprocessorDefinition
//-

	function suite.onFxCompilePreprocessorDefinition() {
		files ({ "shader.hlsl" });
		shaderdefines ({ "DEFINED_VALUE" });

		prepare();
		test.capture ([=[
<FxCompile>
	<PreprocessorDefinitions>DEFINED_VALUE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
</FxCompile>
		]=]);
	}


	function suite.onFxCompilePreprocessorDefinition_multipleDefines() {
		files ({ "shader.hlsl" });
		shaderdefines ({ "DEFINED_VALUE", "OTHER_DEFINED_VALUE" });

		prepare();
		test.capture ([=[
<FxCompile>
	<PreprocessorDefinitions>DEFINED_VALUE;OTHER_DEFINED_VALUE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
</FxCompile>
		]=]);
	}

//-
// Test FxCompileShaderType
//-

	function suite.onFxCompileShaderType() {
		files ({ "shader.hlsl" });
		shadertype ("Effect");

		prepare();
		test.capture ([=[
<FxCompile>
	<ShaderType>Effect</ShaderType>
</FxCompile>
		]=]);
	}

//-
// Test FxCompileShaderModel
//-

	function suite.onFxCompileShaderModel() {
		files ({ "shader.hlsl" });
		shadermodel ("5.0");

		prepare();
		test.capture ([=[
<FxCompile>
	<ShaderModel>5.0</ShaderModel>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderEntry
//-

	function suite.onFxCompileShaderEntry() {
		files ({ "shader.hlsl" });
		shaderentry ("NewEntry");

		prepare();
		test.capture ([=[
<FxCompile>
	<EntryPointName>NewEntry</EntryPointName>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderVariableName
//-

	function suite.onFxCompileShaderVariableName() {
		files ({ "shader.hlsl" });
		shadervariablename ("ShaderVar");

		prepare();
		test.capture ([=[
<FxCompile>
	<VariableName>ShaderVar</VariableName>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderHeaderOutput
//-

	function suite.onFxCompileShaderHeaderOutput() {
		files ({ "shader.hlsl" });
		shaderheaderfileoutput ("%%(filename).hlsl.h");

		prepare();
		test.capture ([=[
<FxCompile>
	<HeaderFileOutput>%(filename).hlsl.h</HeaderFileOutput>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderObjectOutput
//-

	function suite.onFxCompileShaderObjectOutput() {
		files ({ "shader.hlsl" });
		shaderobjectfileoutput ("%%(filename).hlsl.o");

		prepare();
		test.capture ([=[
<FxCompile>
	<ObjectFileOutput>%(filename).hlsl.o</ObjectFileOutput>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderAssembler
//-

	function suite.onFxCompileShaderAssembler() {
		files ({ "shader.hlsl" });
		shaderassembler ("AssemblyCode");

		prepare();
		test.capture ([=[
<FxCompile>
	<AssemblerOutput>AssemblyCode</AssemblerOutput>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderAssemblerOutput
//-

	function suite.onFxCompileShaderAssemblerOutput() {
		files ({ "shader.hlsl" });
		shaderassembleroutput ("%%(filename).hlsl.asm.o");

		prepare();
		test.capture ([=[
<FxCompile>
	<AssemblerOutputFile>%(filename).hlsl.asm.o</AssemblerOutputFile>
</FxCompile>
		]=]);
	}


//-
// Test FxCompileShaderAdditionalOptions
//-

	function suite.onFxCompileShaderAdditionalOptions() {
		files ({ "shader.hlsl" });
		shaderoptions ("-opt");

		prepare();
		test.capture ([=[
<FxCompile>
	<AdditionalOptions>-opt %(AdditionalOptions)</AdditionalOptions>
</FxCompile>
		]=]);
	}
