// load our favourite library
var dispatch = require("dispatch");
var handler = dispatch.newhandler();

// make sure the user knows how to invoke us
if( #arg < 1 ) {
    print("Usage");
    print("    ljs forward.ljs <iport:ohost:oport> ...");
    os.exit(1);
}

// function to move data from one socket to the other
var function move(foo, bar) {
    var live;
    while( 1 ) {
        var data, error, partial = foo->receive(2048);
        live = data || error == "timeout";
        data = data || partial;
	var result;
        result, error = bar->send(data);
        if( ! live || ! result ) {
            foo->close();
            bar->close();
            break;
        }
    }
}

// for each tunnel, start a new server
for( i, v in ipairs(arg) ) {
    // capture forwarding parameters
    var _, _, iport, ohost, oport = string.find(v, "([^:]+):([^:]+):([^:]+)");
    assert(iport, "invalid arguments");
    // create our server socket
    var server = assert(handler.tcp());
    assert(server->setoption("reuseaddr", true));
    assert(server->bind("*", iport));
    assert(server->listen(32));
    // handler for the server object loops accepting new connections
    handler->start(function() {
        while( 1 ) {
            var client = assert(server->accept());
            assert(client->settimeout(0));
            // for each new connection, start a new client handler
            handler->start(function() {
                // handler tries to connect to peer
                var peer = assert(handler.tcp());
                assert(peer->settimeout(0));
                assert(peer->connect(ohost, oport));
                // if sucessful, starts a new handler to send data from
                // client to peer
                handler->start(function() {
                    move(client, peer);
                });
                // afte starting new handler, enter in loop sending data from
                // peer to client
                move(peer, client);
            });
        }
    });
}

// simply loop stepping the server
while( 1 ) {
    handler->step();
}
