//
// d/tools/ldc.ljs
// Provides LDC-specific configuration strings.
// Copyright (c) 2013-2015 Andrew Gough, Manu Evans, and the Premake project
//

	var p = premake;
	p.tools.ldc = { };

	var ldc = p.tools.ldc;
	var project = p.project;
	var config = p.config;
	var d = p.modules.d;


//
// Set default tools
//

	ldc.namestyle = "posix";


//
// Returns list of D compiler flags for a configuration.
//


	ldc.dflags = {
		architecture = {
			x86 = "-m32",
			x86_64 = "-m64",
//			arm = "-march=arm",
//			ppc = "-march=ppc32",
//			ppc64 = "-march=ppc64",
//			spu = "-march=cellspu",
//			mips = "-march=mips",	-- -march=mipsel?
		},
		flags = {
			OmitDefaultLibrary		= "-mscrtlib=",
			CodeCoverage			= "-cov",
			Documentation			= "-D",
			FatalWarnings			= "-w", // Use LLVM flag? : "-fatal-assembler-warnings",
			GenerateHeader			= "-H",
			GenerateJSON			= "-X",
//			Release					= "-release",
			RetainPaths				= "-op",
			SymbolsLikeC			= "-gc",
			UnitTest				= "-unittest",
			Verbose					= "-v",
			AllTemplateInst			= "-allinst",
			BetterC					= "-betterC",
			Main					= "-main",
			PerformSyntaxCheckOnly	= "-o-",
			ShowGC					= "-vgc",
			IgnorePragma			= "-ignore",
		},
		boundscheck = {
			Off = "-boundscheck=off",
			On = "-boundscheck=on",
			SafeOnly = "-boundscheck=safeonly",
		},
		deprecatedfeatures = {
			Allow = "-d",
			Warn = "-dw",
			Error = "-de",
		},
		floatingpoint = {
			Fast = "-fp-contract=fast -enable-unsafe-fp-math",
//			Strict = "-ffloat-store",
		},
		optimize = {
			Off = "-O0",
			On = "-O2",
			Debug = "-O0",
			Full = "-O3",
			Size = "-Oz",
			Speed = "-O3",
		},
		pic = {
			On = "-relocation-model=pic",
		},
		vectorextensions = {
			AVX = "-mattr=+avx",
			SSE = "-mattr=+sse",
			SSE2 = "-mattr=+sse2",
		},
		warnings = {
			Default = "-wi",
			High = "-wi",
			Extra = "-wi",	// TODO: is there a way to get extra warnings?
		},
		symbols = {
			On = "-g",
			FastLink = "-g",
			Full = "-g",
		}
	};

	function ldc.getdflags(cfg) {
		var flags = config.mapFlags(cfg, ldc.dflags);

		if( config.isDebugBuild(cfg) ) {
			table.insert(flags, "-d-debug");
		} else {
			table.insert(flags, "-release");
		}

		if( ! cfg.flags.OmitDefaultLibrary ) {
			var releaseruntime = ! config.isDebugBuild(cfg);
			var staticruntime = true;
			if( cfg.staticruntime == "Off" ) {
				staticruntime = false;
			}
			if( cfg.runtime == "Debug" ) {
				releaseruntime = false;
			} else if( cfg.runtime == "Release" ) {
				releaseruntime = true;
			}

			if( (cfg.staticruntime && cfg.staticruntime != "Default") || (cfg.runtime && cfg.runtime != "Default") ) {
				if( staticruntime == true && releaseruntime == true ) {
					table.insert(flags, "-mscrtlib=libcmt");
				} else if( staticruntime == true && releaseruntime == false ) {
					table.insert(flags, "-mscrtlib=libcmtd");
				} else if( staticruntime == false && releaseruntime == true ) {
					table.insert(flags, "-mscrtlib=msvcrt");
				} else if( staticruntime == false && releaseruntime == false ) {
					table.insert(flags, "-mscrtlib=msvcrtd");
				}
			}
		}

		if( cfg.flags.Documentation ) {
			if( cfg.docname ) {
				table.insert(flags, "-Df=" .. p.quoted(cfg.docname));
			}
			if( cfg.docdir ) {
				table.insert(flags, "-Dd=" .. p.quoted(cfg.docdir));
			}
		}
		if( cfg.flags.GenerateHeader ) {
			if( cfg.headername ) {
				table.insert(flags, "-Hf=" .. p.quoted(cfg.headername));
			}
			if( cfg.headerdir ) {
				table.insert(flags, "-Hd=" .. p.quoted(cfg.headerdir));
			}
		}

		return flags;
	}


//
// Decorate versions for the DMD command line.
//

	function ldc.getversions(versions, level) {
		var result = {};
		for( _, version in ipairs(versions) ) {
			table.insert(result, '-d-version=' .. version);
		}
		if( level ) {
			table.insert(result, '-d-version=' .. level);
		}
		return result;
	}


//
// Decorate debug constants for the DMD command line.
//

	function ldc.getdebug(constants, level) {
		var result = {};
		for( _, constant in ipairs(constants) ) {
			table.insert(result, '-d-debug=' .. constant);
		}
		if( level ) {
			table.insert(result, '-d-debug=' .. level);
		}
		return result;
	}


//
// Decorate import file search paths for the DMD command line.
//

	function ldc.getimportdirs(cfg, dirs) {
		var result = {};
		for( _, dir in ipairs(dirs) ) {
			dir = project.getrelative(cfg.project, dir);
			table.insert(result, '-I=' .. p.quoted(dir));
		}
		return result;
	}


//
// Decorate import file search paths for the DMD command line.
//

	function ldc.getstringimportdirs(cfg, dirs) {
		var result = {};
		for( _, dir in ipairs(dirs) ) {
			dir = project.getrelative(cfg.project, dir);
			table.insert(result, '-J=' .. p.quoted(dir));
		}
		return result;
	}


//
// Returns the target name specific to compiler
//

	function ldc.gettarget(name) {
		return "-of=" .. name;
	}


//
// Return a list of LDFLAGS for a specific configuration.
//

	ldc.ldflags = {
		architecture = {
			x86 = { "-m32" },
			x86_64 = { "-m64" },
		},
		kind = {
			SharedLib = "-shared",
			StaticLib = "-lib",
		},
	};

	function ldc.getldflags(cfg) {
		var flags = config.mapFlags(cfg, ldc.ldflags);
		return flags;
	}


//
// Return a list of decorated additional libraries directories.
//

	ldc.libraryDirectories = {
		architecture = {
			x86 = "-L=-L/usr/lib",
			x86_64 = "-L=-L/usr/lib64",
		}
	};

	function ldc.getLibraryDirectories(cfg) {
		var flags = config.mapFlags(cfg, ldc.libraryDirectories);

		// Scan the list of linked libraries. If any are referenced with
		// paths, add those to the list of library search paths
		for( _, dir in ipairs(config.getlinks(cfg, "system", "directory")) ) {
			table.insert(flags, '-L=-L' .. project.getrelative(cfg.project, dir));
		}

		return flags;
	}


//
// Return the list of libraries to link, decorated with flags as needed.
//

	function ldc.getlinks(cfg, systemonly) {
		var result = {};

		var links;
		if( ! systemonly ) {
			links = config.getlinks(cfg, "siblings", "object");
			for( _, link in ipairs(links) ) {
				// skip external project references, since I have no way
				// to know the actual output target path
				if( ! link.project.external ) {
					if( link.kind == p.STATICLIB ) {
						// Don't use "-l" flag when linking static libraries; instead use
						// path/libname.a to avoid linking a shared library of the same
						// name if one is present
						table.insert(result, "-L=" .. project.getrelative(cfg.project, link.linktarget.abspath));
					} else {
						table.insert(result, "-L=-l" .. link.linktarget.basename);
					}
				}
			}
		}

		// The "-l" flag is fine for system libraries
		links = config.getlinks(cfg, "system", "fullpath");
		for( _, link in ipairs(links) ) {
			if( path.isframework(link) ) {
				table.insert(result, "-framework " .. path.getbasename(link));
			} else if( path.isobjectfile(link) ) {
				table.insert(result, "-L=" .. link);
			} else {
				table.insert(result, "-L=-l" .. path.getbasename(link));
			}
		}

		return result;
	}


//
// Returns makefile-specific configuration rules.
//

	ldc.makesettings = {
	};

	function ldc.getmakesettings(cfg) {
		var settings = config.mapFlags(cfg, ldc.makesettings);
		return table.concat(settings);
	}


//
// Retrieves the executable command name for a tool, based on the
// provided configuration and the operating environment.
//
// @param cfg
//    The configuration to query.
// @param tool
//    The tool to fetch, one of "dc" for the D compiler, or "ar" for the static linker.
// @return
//    The executable command name for a tool, or nil if the system's
//    default value should be used.
//

	ldc.tools = {
		dc = "ldc2",
		ar = "ar",
	};

	function ldc.gettoolname(cfg, tool) {
		return ldc.tools[tool];
	}
