//
// make_makefile.ljs
// Generate a C/C++ project makefile.
// Copyright (c) 2002-2014 Jason Perkins and the Premake project
//

	var p = premake;
	p.make.makefile = {};

	var make       = p.make;
	var makefile   = p.make.makefile;
	var project    = p.project;
	var config     = p.config;
	var fileconfig = p.fileconfig;

//-
// Add namespace for element definition lists for p.callarray()
//-
	makefile.elements = {};

//
// Generate a GNU make makefile project makefile.
//

	makefile.elements.makefile = {
		"header",
		"phonyRules",
		"makefileConfigs",
		"makefileTargetRules"
	};

	function make.makefile.generate(prj) {
		p.eol("\n");
		p.callarray(make, makefile.elements.makefile, prj);
	}


	makefile.elements.configuration = {
		"target",
		"buildCommands",
		"cleanCommands",
	};

	function make.makefileConfigs(prj) {
		for( cfg in project.eachconfig(prj) ) {
			// identify the toolset used by this configurations (would be nicer if
			// this were computed and stored with the configuration up front)

			var toolset = p.tools[cfg.toolset || "gcc"];
			if( ! toolset ) {
				error("Invalid toolset '" .. cfg.toolset .. "'");
			}

			_x('ifeq ($(config),%s)', cfg.shortname);
			p.callarray(make, makefile.elements.configuration, cfg, toolset);
			_p('endif');
			_p('');
		}
	}

	function make.makefileTargetRules(prj) {
		_p('$(TARGET):');
		_p('\t$(BUILDCMDS)');
		_p('');
		_p('clean:');
		_p('\t$(CLEANCMDS)');
		_p('');
	}


	function make.buildCommands(cfg) {
		_p('  define BUILDCMDS');
		var steps = cfg.buildcommands;
		if( #steps > 0 ) {
			steps = os.translateCommandsAndPaths(steps, cfg.project.basedir, cfg.project.location);
			_p('\t@echo Running build commands');
			_p('\t%s', table.implode(steps, "", "", "\n\t"));
		}
		_p('  endef');
	}


	function make.cleanCommands(cfg) {
		_p('  define CLEANCMDS');
		var steps = cfg.cleancommands;
		if( #steps > 0 ) {
			steps = os.translateCommandsAndPaths(steps, cfg.project.basedir, cfg.project.location);
			_p('\t@echo Running clean commands');
			_p('\t%s', table.implode(steps, "", "", "\n\t"));
		}
		_p('  endef');
	}

