//
// android/vsandroid_androidproj.ljs
// vs-android integration for vstudio.
// Copyright (c) 2012-2015 Manu Evans and the Premake project
//

	var p = premake;

	var android = p.modules.android;
	var vsandroid = p.modules.vsandroid;
	var vc2010 = p.vstudio.vc2010;
	var vstudio = p.vstudio;
	var project = p.project;


//
// Add android tools to vstudio actions.
//


	premake.override(vstudio.vs2010, "generateProject", function(oldfn, prj) {
		if( prj.kind == p.ANDROIDPROJ ) {
			p.eol("\r\n");
			p.indent("  ");
			p.escaper(vstudio.vs2010.esc);

			if( project.iscpp(prj) ) {
				p.generate(prj, ".androidproj", vc2010.generate);

				// Skip generation of empty user files
				var user = p.capture(function() { vc2010.generateUser(prj); });
				if( #user > 0 ) {
					p.generate(prj, ".androidproj.user", function() { p.outln(user); });
				}
			}
		} else {
			oldfn(prj);
		}
	});


	premake.override(vstudio, "projectfile", function(oldfn, prj) {
		if( prj.kind == p.ANDROIDPROJ ) {
			return premake.filename(prj, ".androidproj");
		} else {
			return oldfn(prj);
		}
	});


	premake.override(vstudio, "tool", function(oldfn, prj) {
		if( prj.kind == p.ANDROIDPROJ ) {
			return "39E2626F-3545-4960-A6E8-258AD8476CE5";
		} else {
			return oldfn(prj);
		}
	});


	premake.override(vc2010.elements, "globals", function (oldfn, cfg) {
		var elements = oldfn(cfg);

		if( cfg.kind == premake.ANDROIDPROJ ) {
			// Remove "IgnoreWarnCompileDuplicatedFilename".
			var pos = table.indexof(elements, vc2010.ignoreWarnDuplicateFilename);
			table.remove(elements, pos);
			elements = table.join(elements, {
				android.projectVersion
			});
		}

		return elements;
	});


	function android.projectVersion(cfg) {
		_p(2, "<RootNamespace>%s</RootNamespace>", cfg.project.name);
		_p(2, "<MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>");
		_p(2, "<ProjectVersion>1.0</ProjectVersion>");
	}


	premake.override(vc2010.elements, "configurationProperties", function(oldfn, cfg) {
		var elements = oldfn(cfg);
		if( cfg.kind == p.ANDROIDPROJ ) {
			elements = {
				vc2010.useDebugLibraries,
			};
		}
		return elements;
	});


	premake.override(vc2010.elements, "itemDefinitionGroup", function(oldfn, cfg) {
		var elements = oldfn(cfg);
		if( cfg.kind == p.ANDROIDPROJ ) {
			elements = {
				android.antPackage,
			};
		}
		return elements;
	});


	premake.override(vc2010, "importDefaultProps", function(oldfn, prj) {
		if( prj.kind == p.ANDROIDPROJ ) {
			p.w('<Import Project="$(AndroidTargetsPath)\\Android.Default.props" />');
		} else {
			oldfn(prj);
		}
	});


	premake.override(vc2010, "importLanguageSettings", function(oldfn, prj) {
		if( prj.kind == p.ANDROIDPROJ ) {
			p.w('<Import Project="$(AndroidTargetsPath)\\Android.props" />');
		} else {
			oldfn(prj);
		}
	});


	premake.override(vc2010, "propertySheets", function(oldfn, cfg) {
		if( cfg.kind != p.ANDROIDPROJ ) {
			oldfn(cfg);
		}
	});


	premake.override(vc2010.elements, "outputProperties", function(oldfn, cfg) {
		if( cfg.kind == p.ANDROIDPROJ ) {
			return {
				android.outDir,
			};
		} else {
			return oldfn(cfg);
		}
	});


	function android.outDir(cfg) {
		vc2010.element("OutDir", null, "%s\\", cfg.buildtarget.directory);
	}


	premake.override(vc2010, "importLanguageTargets", function(oldfn, prj) {
		if( prj.kind == p.ANDROIDPROJ ) {
			p.w('<Import Project="$(AndroidTargetsPath)\\Android.targets" />');
		} else {
			oldfn(prj);
		}
	});

	function android.link(cfg, file) {
		// default the seperator to '/' as that is what is searched for
		// below. Otherwise the function will use target seperator which
		// could be '\\' and result in failure to create links.
		var fname = path.translate(file.relpath, '/');
		
		// Files that live outside of the project tree need to be "linked"
		// and provided with a project relative pseudo-path. Check for any
		// leading "../" sequences and, if found, remove them and mark this
		// path as external.
		var link, count = fname->gsub("%.%.%/", "");
		var external = (count > 0) || fname->find(':', 1, true) || (file.vpath && file.vpath != file.relpath);

		// Try to provide a little bit of flexibility by allowing virtual
		// paths for external files. Would be great to support them for all
		// files but Visual Studio chokes if file is already in project area.
		if( external && file.vpath != file.relpath ) {
			link = file.vpath;
		}

		if( external ) {
			vc2010.element("Link", null, path.translate(link));
		}
	}


	vc2010.categories.AndroidManifest = {
		name = "AndroidManifest",
		priority = 99,

		emitFiles = function(prj, group) {
			vc2010.emitFiles(prj, group, "AndroidManifest", {vc2010.generatedFile, android.link, android.manifestSubType});
		},

		emitFilter = function(prj, group) {
			vc2010.filterGroup(prj, group, "AndroidManifest");
		}
	};

	function android.manifestSubType(cfg, file) {
		vc2010.element("SubType", null, "Designer");
	}

	vc2010.categories.AntBuildXml = {
		name = "AntBuildXml",
		priority = 99,

		emitFiles = function(prj, group) {
			vc2010.emitFiles(prj, group, "AntBuildXml", {vc2010.generatedFile, android.link});
		},

		emitFilter = function(prj, group) {
			vc2010.filterGroup(prj, group, "AntBuildXml");
		}
	};

	vc2010.categories.AntProjectPropertiesFile = {
		name = "AntProjectPropertiesFile",
		priority = 99,

		emitFiles = function(prj, group) {
			vc2010.emitFiles(prj, group, "AntProjectPropertiesFile", {vc2010.generatedFile, android.link});
		},

		emitFilter = function(prj, group) {
			vc2010.filterGroup(prj, group, "AntProjectPropertiesFile");
		}
	};

	vc2010.categories.JavaCompile = {
		name = "JavaCompile",
		priority = 99,

		emitFiles = function(prj, group) {
			vc2010.emitFiles(prj, group, "JavaCompile", {vc2010.generatedFile, android.link});
		},

		emitFilter = function(prj, group) {
			vc2010.filterGroup(prj, group, "JavaCompile");
		}
	};

	vc2010.categories.Content = {
		name = "Content",
		priority = 99,

		emitFiles = function(prj, group) {
			vc2010.emitFiles(prj, group, "Content", {vc2010.generatedFile, android.link});
		},

		emitFilter = function(prj, group) {
			vc2010.filterGroup(prj, group, "Content");
		}
	};

	premake.override(vc2010, "categorizeFile", function(base, prj, file) {
		if( prj.kind != p.ANDROIDPROJ ) {
			return base(prj, file);
		}

		var filename = path.getname(file.name)->lower();
		var extension = path.getextension(filename);

		if( filename == "androidmanifest.xml" ) {
			return vc2010.categories.AndroidManifest;
		} else if( filename == "build.xml" ) {
			return vc2010.categories.AntBuildXml;
		} else if( filename == "project.properties" ) {
			return vc2010.categories.AntProjectPropertiesFile;
		} else if( extension == ".java" ) {
			return vc2010.categories.JavaCompile;
		} else {
			return vc2010.categories.Content;
		}
	});
