//-
// d/tests/test_dmd.ljs
// Automated test suite for dmd.
// Copyright (c) 2011-2015 Manu Evans and the Premake project
//-

	var suite = test.declare("d_dmd");
	var p = premake;
	var m = p.modules.d;

	var make = p.make;
	var project = p.project;


//-------------------------------------------------------------------------
// Setup/Teardown
//-------------------------------------------------------------------------

	var wks, prj, cfg;

	function suite.setup() {
		p.escaper(make.esc);
		wks = test.createWorkspace();
	}

	var function prepare_cfg(calls) {
		prj = p.workspace.getproject(wks, 1);
		var cfg = test.getconfig(prj, "Debug");
		var toolset = p.tools.dmd;
		p.callArray(calls, cfg, toolset);
	}


//
// Check configuration generation
//

	function suite.dmd_dTools() {
		prepare_cfg({ m.make.dTools });
		test.capture ([=[
  DC = dmd
		]=]);
	}

	function suite.dmd_target() {
		prepare_cfg({ m.make.target });
		test.capture ([=[

		]=]);
	}

	function suite.dmd_target_separateCompilation() {
		flags ({ "SeparateCompilation" });
		prepare_cfg({ m.make.target });
		test.capture ([=[
  OUTPUTFLAG = -of"$@"
		]=]);
	}

	function suite.dmd_versions() {
		versionlevel (10);
		versionconstants ({ "A", "B" });
		prepare_cfg({ m.make.versions });
		test.capture ([=[
  VERSIONS += -version=A -version=B -version=10
		]=]);
	}

	function suite.dmd_debug() {
		debuglevel (10);
		debugconstants ({ "A", "B" });
		prepare_cfg({ m.make.debug });
		test.capture ([=[
  DEBUG += -debug=A -debug=B -debug=10
		]=]);
	}

	function suite.dmd_imports() {
		importdirs ({ "dir1", "dir2/" });
		prepare_cfg({ m.make.imports });
		test.capture ([=[
  IMPORTS += -Idir1 -Idir2
		]=]);
	}

	function suite.dmd_dFlags() {
		prepare_cfg({ m.make.dFlags });
		test.capture ([=[
  ALL_DFLAGS += $(DFLAGS) -release $(VERSIONS) $(DEBUG) $(IMPORTS) $(STRINGIMPORTS) $(ARCH)
		]=]);
	}

	function suite.dmd_linkCmd() {
		prepare_cfg({ m.make.linkCmd });
		test.capture ([=[
  BUILDCMD = $(DC) -of$(TARGET) $(ALL_DFLAGS) $(ALL_LDFLAGS) $(LIBS) $(SOURCEFILES)
		]=]);
	}

	function suite.dmd_linkCmd_separateCompilation() {
		flags ({ "SeparateCompilation" });
		prepare_cfg({ m.make.linkCmd });
		test.capture ([=[
  LINKCMD = $(DC) -of$(TARGET) $(ALL_LDFLAGS) $(LIBS) $(OBJECTS)
		]=]);
	}
