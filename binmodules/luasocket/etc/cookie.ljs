var socket = require("socket");
var http = require("socket.http");
var url = require("socket.url");
var ltn12 = require("ltn12");

var token_class =  '[^%c%s%(%)%<%>%@%,%;%:%\\%"%/%[%]%?%=%{%}]';

var function unquote(t, quoted) { 
    var n = string.match(t, "%$(%d+)$");
    if( n ) { n = tonumber(n); }
    if( quoted[n] ) { return quoted[n];
    } else { return t; }
}

var function parse_set_cookie(c, quoted, cookie_table) {
    c = c .. ";$last=last;";
    var _, __, n, v, i = string.find(c, "(" .. token_class .. 
        "+)%s*=%s*(.-)%s*;%s*()");
    var cookie = {
        name = n, 
        value = unquote(v, quoted), 
        attributes = {}
    };
    while( 1 ) {
        _, __, n, v, i = string.find(c, "(" .. token_class .. 
            "+)%s*=?%s*(.-)%s*;%s*()", i);
        if( ! n || n == "$last" ) { break; }
        cookie.attributes[#cookie.attributes+1] = {
            name = n, 
            value = unquote(v, quoted)
        };
    }
    cookie_table[#cookie_table+1] = cookie;
}

var function split_set_cookie(s, cookie_table) {
    cookie_table = cookie_table || {};
    // remove quoted strings from cookie list
    var quoted = {};
    s = string.gsub(s, '"(.-)"', function(q) {
        quoted[#quoted+1] = q;
        return "$" .. #quoted;
    });
    // add sentinel
    s = s .. ",$last=";
    // split into individual cookies
    i = 1;
    while( 1 ) {
        var _, __, cookie, next_token;
        _, __, cookie, i, next_token = string.find(s, "(.-)%s*%,%s*()(" .. 
            token_class .. "+)%s*=", i);
        if( ! next_token ) { break; }
        parse_set_cookie(cookie, quoted, cookie_table);
        if( next_token == "$last" ) { break; }
    }
    return cookie_table;
}

var function quote(s) {
    if( string.find(s, "[ %,%;]") ) { return '"' .. s .. '"';
    } else { return s; }
}

var _empty = {};
var function build_cookies(cookies) { 
    s = "";
    for( i,v in ipairs(cookies || _empty) ) {
        if( v.name ) {
            s = s .. v.name;
            if( v.value && v.value != "" ) { 
                s = s .. '=' .. quote(v.value);
            }
        }
        if( v.name && #(v.attributes || _empty) > 0 ) { s = s .. "; ";  }
        for( j,u in ipairs(v.attributes || _empty) ) {
            if( u.name ) {
                s = s .. u.name;
                if( u.value && u.value != "" ) {
                    s = s .. '=' .. quote(u.value);
                }
            }
            if( j < #v.attributes ) { s = s .. "; ";  }
        }
        if( i < #cookies ) { s = s .. ", "; }
    }
    return s; 
}

