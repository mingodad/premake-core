//
// Name:        codelite/codelite.ljs
// Purpose:     Define the CodeLite action(s).
// Author:      Ryan Pusztai
// Modified by: Andrea Zanellato
//              Andrew Gough
//              Manu Evans
// Created:     2013/05/06
// Copyright:   (c) 2008-2015 Jason Perkins and the Premake project
//

	var p = premake;

	p.modules.codelite = {};
	p.modules.codelite._VERSION = p._VERSION;

	var codelite = p.modules.codelite;
	var project = p.project;


	function codelite.cfgname(cfg) {
		var cfgname = cfg.buildcfg;
		if( codelite.workspace.multiplePlatforms ) {
			cfgname = string.format("%s|%s", cfg.platform, cfg.buildcfg);
		}
		return cfgname;
	}

	function codelite.esc(value) {
		var result = value->gsub('"', '\\&quot;');
		result = result->gsub('<', '&lt;');
		result = result->gsub('>', '&gt;');
	    result = result->gsub('&', '&amp;');
		return result;
	}

	function codelite.generateWorkspace(wks) {
		p.eol("\r\n");
		p.indent("  ");
		p.escaper(codelite.esc);

		p.generate(wks, ".workspace", codelite.workspace.generate);
	}

	function codelite.generateProject(prj) {
		p.eol("\r\n");
		p.indent("  ");
		p.escaper(codelite.esc);

		if( project.isc(prj) || project.iscpp(prj) ) {
			p.generate(prj, ".project", codelite.project.generate);
		}
	}

	function codelite.cleanWorkspace(wks) {
		p.clean.file(wks, wks.name .. ".workspace");
		p.clean.file(wks, wks.name .. "_wsp.mk");
		p.clean.file(wks, wks.name .. ".tags");
		p.clean.file(wks, ".clang");
	}

	function codelite.cleanProject(prj) {
		p.clean.file(prj, prj.name .. ".project");
		p.clean.file(prj, prj.name .. ".mk");
		p.clean.file(prj, prj.name .. ".list");
		p.clean.file(prj, prj.name .. ".out");
	}

	function codelite.cleanTarget(prj) {
		// TODO..
	}

	include("codelite_workspace.ljs");
	include("codelite_project.ljs");

	return codelite;
