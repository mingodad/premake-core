//
// tests/actions/vstudio/vc2010/test_debug_settings.ljs
// Validate handling of the working directory for debugging.
// Copyright (c) 2011-2013 Jason Perkins and the Premake project
//

	var p = premake;
	var suite = test.declare("vstudio_vs2010_debug_settings");
	var vc2010 = p.vstudio.vc2010;
	var project = p.project;


//
// Setup
//

	var wks, prj;

	function suite.setup() {
		p.action.set("vs2010");
		wks, prj = test.createWorkspace();
	}

	var function prepare() {
		var cfg = test.getconfig(prj, "Debug");
		vc2010.debugSettings(cfg);
	}


//
// If no debug directory is set, nothing should be output.
//

	function suite.noOutput_onNoDebugDir() {
		prepare();
		test.isemptycapture();
	}

//
// The debug command should specified relative to the project location.
//

	function suite.debugCommand_isProjectRelative() {
		debugcommand ("bin/emulator.exe");
		prepare();

		expectedPath = path.translate(path.getabsolute(os.getcwd())) .. "\\bin\\emulator.exe";
		expected = "<LocalDebuggerCommand>" .. expectedPath .. "</LocalDebuggerCommand>";
		expected = expected .. "\n<DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>";
		test.capture (expected);
	}


//
// The debug directory should specified relative to the project location.
//

	function suite.debugDirectory_isProjectRelative() {
		debugdir ("bin/debug");
		prepare();
		test.capture ([=[
<LocalDebuggerWorkingDirectory>bin\debug</LocalDebuggerWorkingDirectory>
<DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
		]=]);
	}

//
// Verify handling of debug arguments.
//

	function suite.debuggerCommandArgs_onDebugArgs() {
		debugargs ({ "arg1", "arg2", "arg1" });
		prepare();
		test.capture ([=[
<LocalDebuggerCommandArguments>arg1 arg2 arg1</LocalDebuggerCommandArguments>
		]=]);
	}

//
// Check the handling of debug environment variables.
//

	function suite.localDebuggerEnv_onDebugEnv() {
		debugenvs ({ "key=value" });
		prepare();
		test.capture ([=[
<LocalDebuggerEnvironment>key=value</LocalDebuggerEnvironment>
		]=]);
	}

//
// Multiple environment variables should be separated by a "\n" sequence.
//

	function suite.localDebuggerEnv_onMultipleDebugEnv() {
		debugenvs ({ "key=value", "foo=bar" });
		prepare();
		test.capture ([=[
<LocalDebuggerEnvironment>key=value
foo=bar</LocalDebuggerEnvironment>
		]=]);
	}

//
// Test Debugger Flavor
//

	function suite.debuggerFlavor_OnWindowsLocal() {
		debuggerflavor ("Local");
		prepare();
		test.capture ([=[
<DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>
		]=]);
	}

	function suite.debuggerFlavor_OnWindowsRemote() {
		debuggerflavor ("Remote");
		prepare();
		test.capture ([=[
<DebuggerFlavor>WindowsRemoteDebugger</DebuggerFlavor>
		]=]);
	}
