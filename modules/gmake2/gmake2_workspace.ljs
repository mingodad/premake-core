//
// gmake2_workspace.ljs
// Generate a workspace-level makefile.
// (c) 2016-2017 Jason Perkins, Blizzard Entertainment and the Premake project
//

	var p = premake;
	var gmake2 = p.modules.gmake2;

	var tree    = p.tree;
	var project = p.project;

//
// Generate a GNU make "workspace" makefile, with support for the new platforms API.
//

	function gmake2.generate_workspace(wks) {
		p.eol("\n");

		gmake2.header(wks);

		gmake2.configmap(wks);
		gmake2.projects(wks);

		gmake2.workspacePhonyRule(wks);
		gmake2.groupRules(wks);

		gmake2.projectrules(wks);
		gmake2.cleanrules(wks);
		gmake2.helprule(wks);
	}


//
// Write out the workspace's configuration map, which maps workspace
// level configurations to the project level equivalents.
//

	function gmake2.configmap(wks) {
		var first = true;
		for( cfg in p.workspace.eachconfig(wks) ) {
			if( first ) {
				_p('ifeq ($(config),%s)', cfg.shortname);
				first = false;
			} else {
				_p('else ifeq ($(config),%s)', cfg.shortname);
			}

			for( prj in p.workspace.eachproject(wks) ) {
				var prjcfg = project.getconfig(prj, cfg.buildcfg, cfg.platform);
				if( prjcfg ) {
					_p('  %s_config = %s', gmake2.tovar(prj.name), prjcfg.shortname);
				}
			}

			_p('');
		}

		if( ! first ) {
			_p('else');
			_p('  $(error "invalid configuration $(config)")');
			_p('endif');
			_p('');
		}
	}


//
// Write out the rules for the `make clean` action.
//

	function gmake2.cleanrules(wks) {
		_p('clean:');
		for( prj in p.workspace.eachproject(wks) ) {
			var prjpath = p.filename(prj, gmake2.getmakefilename(prj, true));
			var prjdir = path.getdirectory(path.getrelative(wks.location, prjpath));
			var prjname = path.getname(prjpath);
			_x(1,'@${MAKE} --no-print-directory -C %s -f %s clean', prjdir, prjname);
		}
		_p('');
	}


//
// Write out the make file help rule and configurations list.
//

	function gmake2.helprule(wks) {
		_p('help:');
		_p(1,'@echo "Usage: make [config=name] [target]"');
		_p(1,'@echo ""');
		_p(1,'@echo "CONFIGURATIONS:"');

		for( cfg in p.workspace.eachconfig(wks) ) {
			_x(1, '@echo "  %s"', cfg.shortname);
		}

		_p(1,'@echo ""');

		_p(1,'@echo "TARGETS:"');
		_p(1,'@echo "   all (default)"');
		_p(1,'@echo "   clean"');

		for( prj in p.workspace.eachproject(wks) ) {
			_p(1,'@echo "   %s"', prj.name);
		}

		_p(1,'@echo ""');
		_p(1,'@echo "For more information, see https://github.com/premake/premake-core/wiki"');
	}


//
// Write out the list of projects that comprise the workspace.
//

	function gmake2.projects(wks) {
		_p('PROJECTS := %s', table.concat(p.esc(table.extract(wks.projects, "name")), " "));
		_p('');
	}

//
// Write out the workspace PHONY rule
//

	function gmake2.workspacePhonyRule(wks) {
		var groups = {};
		var tr = p.workspace.grouptree(wks);
		tree.traverse(tr, {
			onbranch = function(n) {
				table.insert(groups, n.path);
			}
		});

		_p('.PHONY: all clean help $(PROJECTS) ' .. table.implode(groups, '', '', ' '));
		_p('');
		_p('all: $(PROJECTS)');
		_p('');
	}

//
// Write out the phony rules representing project groups
//
	function gmake2.groupRules(wks) {
		// Transform workspace groups into target aggregate
		var tr = p.workspace.grouptree(wks);
		tree.traverse(tr, {
			onbranch = function(n) {
				var rule = n.path .. ":";
				var projectTargets = {};
				var groupTargets = {};
				for( i, c in pairs(n.children)
				) {
					if( type(i) == "string"
					) {
						if( c.project
						) {
							table.insert(projectTargets, c.name);
						} else {
							table.insert(groupTargets, c.path);
						}
					}
				}
				if( #groupTargets > 0 ) {
					table.sort(groupTargets);
					rule = rule .. " " .. table.concat(groupTargets, " ");
				}
				if( #projectTargets > 0 ) {
					table.sort(projectTargets);
					rule = rule .. " " .. table.concat(projectTargets, " ");
				}
				_p(rule);
				_p('');
			}
		});
	}

//
// Write out the rules to build each of the workspace's projects.
//

	function gmake2.projectrules(wks) {
		for( prj in p.workspace.eachproject(wks) ) {
			var deps = project.getdependencies(prj);
			deps = table.extract(deps, "name");
			_p('%s:%s', p.esc(prj.name), gmake2.list(deps));

			var cfgvar = gmake2.tovar(prj.name);
			_p('ifneq (,$(%s_config))', cfgvar);

			_p(1,'@echo "==== Building %s ($(%s_config)) ===="', prj.name, cfgvar);

			var prjpath = p.filename(prj, gmake2.getmakefilename(prj, true));
			var prjdir = path.getdirectory(path.getrelative(wks.location, prjpath));
			var prjname = path.getname(prjpath);

			_x(1,'@${MAKE} --no-print-directory -C %s -f %s config=$(%s_config)', prjdir, prjname, cfgvar);

			_p('endif');
			_p('');
		}
	}
