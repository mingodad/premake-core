//
// _preload.ljs
// Define the makefile action(s).
// Copyright (c) 2002-2015 Jason Perkins and the Premake project
//

	var p = premake;
	var project = p.project;

//-
// The GNU make action, with support for the new platforms API
//-

	newaction ({
		trigger         = "gmake",
		shortname       = "GNU Make",
		description     = "Generate GNU makefiles for POSIX, MinGW, and Cygwin",
		toolset         = "gcc",

		valid_kinds     = { "ConsoleApp", "WindowedApp", "StaticLib", "SharedLib", "Utility", "Makefile" },
		valid_languages = { "C", "C++", "C#" },
		valid_tools     = {
			cc     = { "clang", "gcc" },
			dotnet = { "mono", "msnet", "pnet" }
		},

		onWorkspace = function(wks) {
			p.escaper(p.make.esc);
			p.generate(wks, p.make.getmakefilename(wks, false), p.make.generate_workspace);
		},

		onProject = function(prj) {
			p.escaper(p.make.esc);
			var makefile = p.make.getmakefilename(prj, true);
			if( prj.kind == p.UTILITY ) {
				p.generate(prj, makefile, p.make.utility.generate);
			} else if( prj.kind == p.MAKEFILE ) {
				p.generate(prj, makefile, p.make.makefile.generate);
			} else {
				if( project.isdotnet(prj) ) {
					p.generate(prj, makefile, p.make.cs.generate);
				} else if( project.isc(prj) || project.iscpp(prj) ) {
					p.generate(prj, makefile, p.make.cpp.generate);
				}
			}
		},

		onCleanWorkspace = function(wks) {
			p.clean.file(wks, p.make.getmakefilename(wks, false));
		},

		onCleanProject = function(prj) {
			p.clean.file(prj, p.make.getmakefilename(prj, true));
		}
	});


//
// Decide when the full module should be loaded.
//

	return function(cfg) {
		return (_ACTION == "gmake");
	};
