//
// string.ljs
// Additions to Lua's built-in string functions.
// Copyright (c) 2002-2013 Jason Perkins and the Premake project
//


//
// Capitalize the first letter of the string.
//

	function string.capitalized(this) {
		return this->gsub("^%l", string.upper);
	}



//
// Returns true if the string has a match for the plain specified pattern
//

	function string.contains(s, match) {
		return string.find(s, match, 1, true) != null;
	}


//
// Returns an array of strings, each of which is a substring of s
// formed by splitting on boundaries formed by `pattern`.
//

	function string.explode(s, pattern, plain, maxTokens) {
		if( (pattern == '') ) { return false; }
		var pos = 0;
		var arr = { };
		for( st,sp in function() { return s->find(pattern, pos, plain); } ) {
			table.insert(arr, s->sub(pos, st-1));
			pos = sp + 1;
			if( maxTokens != null && maxTokens > 0 ) {
				--maxTokens    ;
				if( maxTokens == 0 ) {
					break;
				}
			}
		}
		table.insert(arr, s->sub(pos));
		return arr;
	}



//
// Find the last instance of a pattern in a string.
//

	function string.findlast(s, pattern, plain) {
		var curr = 0;
		do {
			var next = s->find(pattern, curr + 1, plain);
			if( (next) ) { curr = next; }
		} while(!( (! next)) );
		if( (curr > 0) ) {
			return curr;
		}
	}



//
// Returns the number of lines of text contained by the string.
//

	function string.lines(s) {
		var trailing, n = s->gsub('.-\n', '');
		if( #trailing > 0 ) {
			++n    ;
		}
		return n;
	}



//-
// Return a plural version of a string.
//-

	function string::plural() {
		if( this->endswith("y") ) {
			return this->sub(1, #this - 1) .. "ies";
		} else {
			return this .. "s";
		}
	}



//-
// Returns the string escaped for Lua patterns.
//-

	function string.escapepattern(s) {
		return s->gsub("[%(%)%.%%%+%-%*%?%[%]%^%$]", "%%%0");
	}
