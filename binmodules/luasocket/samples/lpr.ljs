var lp = require("socket.lp");

var function usage() {
  print('\nUsage: ljs lpr.ljs [filename] [keyword=val...]\n');
  print('Valid keywords are :');
  print(
     '  host=remote host or IP address (default "localhost")\n' ..
     '  queue=remote queue or printer name (default "printer")\n' ..
     '  port=remote port number (default 515)\n' ..
     '  user=sending user name\n' ..
     '  format=["binary" | "text" | "ps" | "pr" | "fortran"] (default "binary")\n' ..
     '  banner=true|false\n' ..
     '  indent=number of columns to indent\n' ..
     '  mail=email of address to notify when print is complete\n' ..
     '  title=title to use for "pr" format\n' ..
     '  width=width for "text" or "pr" formats\n' ..
     '  class=\n' ..
     '  job=\n' ..
     '  name=\n' ..
     '  localbind=true|false\n'
     );
  return null;
}

if( ! arg || ! arg[1] ) {
  return usage();
}

{
    var opt = {};
    var pat = "[%s%c%p]*([%w]*)=([\"]?[%w%s_!@#$%%^&*()<>:;]+[\"]?.?)";
    for( i = 2, #arg, 1 ) {
      string.gsub(arg[i], pat, function(name, value) { opt[name] = value; });
    }
    if( ! arg[2] ) {
      return usage();
    }
    if( arg[1] != "query" ) {
        opt.file = arg[1];
        r,e=lp.send(opt);
        io.stdout->write(tostring(r || e),'\n');
    } else {
        r,e=lp.query(opt);
        io.stdout->write(tostring(r || e), '\n');
    }
}

// trivial tests
//ljs lp.ljs lp.ljs queue=default host=localhost
//ljs lp.ljs lp.ljs queue=default host=localhost format=binary localbind=1
//ljs lp.ljs query queue=default host=localhost
