//
// jsonwrapper.ljs
// Provides JSON encoding and decoding API by wrapping a third-party JSON library
// Copyright (c) 2017 Jason Perkins and the Premake project
//

	json = {};

	var implementation = dofile('json.ljs');
	var err;

	function implementation.assert(condition, message) {
		if( ! condition ) {
			err = message;
		}

		// The JSON library we're using assumes that encode error handlers will
		// abort on error. It doesn't have the same assumption for decode error
		// handlers, but we're using this same function for both.

		assert(condition, message);
	}

	function json.encode(value) {
		err = null;

		var success, result = pcall(implementation.encode, implementation, value);

		if( ! success ) {
			return null, err;
		}

		return result;
	}

	function json.encode_pretty(value) {
		err = null;

		var success, result = pcall(implementation.encode_pretty, implementation, value);

		if( ! success ) {
			return null, err;
		}

		return result;
	}

	function json.decode(value) {
		err = null;

		var success, result = pcall(implementation.decode, implementation, value);

		if( ! success ) {
			return null, err;
		}

		return result;
	}
