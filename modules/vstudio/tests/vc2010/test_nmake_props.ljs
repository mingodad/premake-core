//
// tests/actions/vstudio/vc2010/test_nmake_props.ljs
// Check makefile project generation.
// Copyright (c) 2013 Jason Perkins and the Premake project
//

	var p = premake;
	var suite = test.declare("vs2010_nmake_props");
	var vc2010 = p.vstudio.vc2010;


//
// Setup
//

	var wks, prj;

	function suite.setup() {
		p.action.set("vs2010");
		wks, prj = test.createWorkspace();
		kind ("Makefile");
	}

	var function prepare() {
		var cfg = test.getconfig(prj, "Debug");
		vc2010.nmakeProperties(cfg);
	}


//
// Check the structure with the default project values.
//

	function suite.structureIsCorrect_onDefaultValues() {
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
</PropertyGroup>
		]=]);
	}


//
// Element should be skipped for non-Makefile projects.
//

	function suite.skips_onNonMakefile() {
		kind ("ConsoleApp");
		prepare();
		test.isemptycapture();
	}


//
// Make sure the target file extension is included.
//

	function suite.usesTargetExtension() {
		targetextension (".exe");
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject.exe</NMakeOutput>
</PropertyGroup>
		]=]);
	}


//
// Verify generation of the build commands.
//

	function suite.buildCommandLine_onSingleCommand() {
		buildcommands ({ "command 1" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakeBuildCommandLine>command 1</NMakeBuildCommandLine>
</PropertyGroup>
		]=]);
	}

	function suite.buildCommandLine_onMultipleCommands() {
		buildcommands ({ "command 1", "command 2" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakeBuildCommandLine>command 1
command 2</NMakeBuildCommandLine>
</PropertyGroup>
		]=]);
	}

	function suite.rebuildCommandLine() {
		rebuildcommands ({ "command 1" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakeReBuildCommandLine>command 1</NMakeReBuildCommandLine>
</PropertyGroup>
		]=]);
	}

	function suite.cleanCommandLine() {
		cleancommands ({ "command 1" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakeCleanCommandLine>command 1</NMakeCleanCommandLine>
</PropertyGroup>
		]=]);
	}

	function suite.onDefines() {
		defines ({ "DEBUG", "_DEBUG" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakePreprocessorDefinitions>DEBUG;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
</PropertyGroup>
		]=]);
	}

	function suite.onEscapedDefines() {
		p.escaper(p.vstudio.vs2010.esc);
		defines ({ "&", "<", ">" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakePreprocessorDefinitions>&amp;;&lt;;&gt;;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
</PropertyGroup>
		]=]);
		p.escaper(null);
	}

	function suite.onIncludeDirs() {
		includedirs ({ "include/lua", "include/zlib" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
	<NMakeIncludeSearchPath>include\lua;include\zlib</NMakeIncludeSearchPath>
</PropertyGroup>
		]=]);
	}

	function suite.onBinDirs() {
		bindirs ({ "include/lua", "include/zlib" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<ExecutablePath>$(ProjectDir)include\lua;$(ProjectDir)include\zlib;$(ExecutablePath)</ExecutablePath>
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
</PropertyGroup>
		]=]);
	}

	function suite.onSysIncludeDirs() {
		sysincludedirs ({ "include/lua", "include/zlib" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<IncludePath>include\lua;include\zlib;$(IncludePath)</IncludePath>
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
</PropertyGroup>
		]=]);
	}

	function suite.onSysLibDirs() {
		syslibdirs ({ "include/lua", "include/zlib" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<LibraryPath>include\lua;include\zlib;$(LibraryPath)</LibraryPath>
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
</PropertyGroup>
		]=]);
	}


//
// Should not emit include dirs or preprocessor definitions if the project
// kind is "None", since that project is by definition not buildable.
//-

	function suite.noIncludeDirsOrPreprocessorDefs_onKindNone() {
		kind ("None");
		defines ({ "DEBUG", "_DEBUG" });
		includedirs ({ "include/lua", "include/zlib" });
		prepare();
		test.capture ([=[
<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
	<NMakeOutput>$(OutDir)MyProject</NMakeOutput>
</PropertyGroup>
		]=]);
	}
