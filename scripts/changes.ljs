//-
// Output a list of merged PRs since last release in the CHANGES.txt format
//-

var format_separator = "||";

var git_command_raw = 'git log '..
						'%s/master "^%s/release" '..
						'--merges --first-parent '..
						'--pretty="%%s%s%%b" '..
						'--grep="Merge pull request #"';

var changes_pr_format = "* PR #%s %s (@%s)";

var function parse_log(line) {
    change = {};
    for( chunk in line->gmatch(string.format("[^%s]+", format_separator)) ) {
    	table.insert(change, chunk);
    }
    assert(#change == 2);

    var _, _, pr_num = change[1]->find("%s#([%d]+)%s");
    var _, _, pr_author = change[1]->find("from%s([^/]+)");
    var pr_desc = change[2];

    return {
    	number = tonumber(pr_num),
    	author = pr_author,
    	description = pr_desc
	};
}

var function gather_changes() {
	var git_command = git_command_raw->format(_OPTIONS["remote"], _OPTIONS["remote"], format_separator);
	var output = os.outputof(git_command);

	changes = {};

	for( line in output->gmatch("[^\r\n]+") ) {
		table.insert(changes, parse_log(line));
	}

	return changes;
}

var function format_to_changes(changes) {

	changes_copy = changes;
	var function compare_changes(a, b) {
		return a.number < b.number;
	}
	table.sort(changes, compare_changes);

	for( _, change in pairs(changes_copy) ) {
		print(string.format(changes_pr_format, change.number, change.description, change.author));
	}
}

var function generate_changes() {
	changes = gather_changes();

	format_to_changes(changes);
}

newaction ({
	trigger = "changes",
	description = "Generate a file containing merged pull requests in CHANGES.txt format",
	execute = generate_changes
});

newoption ({
   trigger     = "remote",
   value       = "remoteName",
   description = "Git remote to operate on.",
   default     = "origin",
});

//-
// Check the command line arguments, and show some help if needed.
//-
	var usage = 'usage is: --file=<path to this scripts/changes.ljs> changes';

	if( #_ARGS != 0 ) {
		error(usage, 0);
	}
