//
// tests/actions/vstudio/cs2005/test_debug_props.ljs
// Test debugging and optimization flags block of a Visual Studio 2005+ C# project.
// Copyright (c) 2012-2013 Jason Perkins and the Premake project
//

	var p = premake;
	var suite = test.declare("vstudio_cs2005_debug_props");
	var cs2005 = p.vstudio.cs2005;
	var dn2005 = p.vstudio.dotnetbase;
	var project = p.project;


//
// Setup and teardown
//

	var wks, prj;

	function suite.setup() {
		p.action.set("vs2005");
		wks, prj = test.createWorkspace();
	}

	var function prepare() {
		var cfg = test.getconfig(prj, "Debug");
		dn2005.debugProps(cfg);
	}


//
// Check the handling of the Symbols flag.
//

	function suite.debugSymbols_onNoSymbolsFlag() {
		prepare();
		test.capture ([=[
		<DebugType>pdbonly</DebugType>
		<Optimize>false</Optimize>
		]=]);
	}

	function suite.debugSymbols_onSymbolsFlag() {
		symbols ("On");
		prepare();
		test.capture ([=[
		<DebugSymbols>true</DebugSymbols>
		<DebugType>full</DebugType>
		<Optimize>false</Optimize>
		]=]);
	}

//-
//- Check handling of debug parameters.
//-

	function suite.debugCommandParameters() {
		debugargs ("foobar");

		var cfg = test.getconfig(prj, "Debug");
		dn2005.debugCommandParameters(cfg);

		test.capture ([=[
		<Commandlineparameters>foobar</Commandlineparameters>
		]=]);
	}

	function suite.debugStartArguments() {
		debugargs ("foobar");
		var cfg = test.getconfig(prj, "Debug");
		cs2005.localDebuggerCommandArguments(cfg);
		test.capture ([=[
<StartArguments>foobar</StartArguments>
		]=]);
	}

//
// Check handling of optimization flags.
//

	function suite.optimize_onOptimizeFlag() {
		optimize ("On");
		prepare();
		test.capture ([=[
		<DebugType>pdbonly</DebugType>
		<Optimize>true</Optimize>
		]=]);
	}

	function suite.optimize_onOptimizeSizeFlag() {
		optimize ("Size");
		prepare();
		test.capture ([=[
		<DebugType>pdbonly</DebugType>
		<Optimize>true</Optimize>
		]=]);
	}

	function suite.optimize_onOptimizeSpeedFlag() {
		optimize ("Speed");
		prepare();
		test.capture ([=[
		<DebugType>pdbonly</DebugType>
		<Optimize>true</Optimize>
		]=]);
	}
